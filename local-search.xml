<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1 逻辑语言</title>
    <link href="/clu15c2uc0007f8q1eny1h56a_1-%E9%80%BB%E8%BE%91%E8%AF%AD%E8%A8%80/"/>
    <url>/clu15c2uc0007f8q1eny1h56a_1-%E9%80%BB%E8%BE%91%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1>1 逻辑运算：</h1><p>对象、运算、关系</p><h3 id="定义1-1-1-逻辑真值">定义1.1.1 逻辑真值</h3><p>逻辑对象是真和假，也称为<strong>逻辑真值</strong>， 简称真值，记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 。</p><ul><li>逻辑真值集合是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{0,1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span></li><li>在真值集合上可以定义逻辑运算和逻辑关系。</li><li>真值集合以及逻辑运算、逻辑关系统称为<strong>逻辑域</strong></li></ul><h3 id="定义">定义</h3>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线性表(List)</title>
    <link href="/clu15c2u60002f8q19uykf9va_%E7%BA%BF%E6%80%A7%E8%A1%A8-list/"/>
    <url>/clu15c2u60002f8q19uykf9va_%E7%BA%BF%E6%80%A7%E8%A1%A8-list/</url>
    
    <content type="html"><![CDATA[<h1>预处理</h1><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR 0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE 1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> FALSE 0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE max_size（注意替换）</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;</code></pre></div><h1>Operation</h1><div class="note note-info">            <p>本文中的第i个元素均<strong>从0开始</strong>，到length-1结束。</p>          </div><div class="code-wrapper"><pre><code class="hljs C">Status <span class="hljs-title function_">visit</span><span class="hljs-params">(*E)</span>; <span class="hljs-comment">//读取或更改元素e</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs C">Status <span class="hljs-title function_">InitList</span><span class="hljs-params">(*L)</span>; <span class="hljs-comment">//初始化操作，建立一个空的线性表L。</span>Status <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(*L)</span>; <span class="hljs-comment">//若线性表为空，返回true，否则返回false。</span>Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(*L)</span>; <span class="hljs-comment">//将线性表清空。</span>Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(*L, i, *E)</span>; <span class="hljs-comment">//将线性表L中的第i个位置元素值返回给e。</span><span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(*L, *E, compar)</span>; <span class="hljs-comment">//在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。</span>Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(*L, i, *E)</span>; <span class="hljs-comment">//在线性表L中的第i个位置插入新元素e。</span>Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(*L, i, *E)</span>; <span class="hljs-comment">//删除线性表L中第i个位置元素，并用e返回其值。</span><span class="hljs-type">int</span> <span class="hljs-title function_">ListLength</span><span class="hljs-params">(*L)</span>; <span class="hljs-comment">//返回线性表L的元素个数。</span>Status <span class="hljs-title function_">ListTraverse</span><span class="hljs-params">(*L)</span>; <span class="hljs-comment">//依次访问线性表L的每个元素。</span></code></pre></div><h1>顺序存储</h1><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-type">char</span> title[<span class="hljs-number">51</span>];    <span class="hljs-type">char</span> author[<span class="hljs-number">21</span>];    <span class="hljs-type">char</span> publish[<span class="hljs-number">31</span>];    <span class="hljs-type">char</span> data[<span class="hljs-number">11</span>];&#125; ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>ElemType data[MAXSIZE];<span class="hljs-type">int</span> length;&#125; SqList;</code></pre></div><div class="code-wrapper"><pre><code class="hljs C">Status <span class="hljs-title function_">InitList</span><span class="hljs-params">(SqList *L)</span>&#123;L-&gt;length = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(<span class="hljs-type">const</span> SqList *L)</span>&#123;<span class="hljs-keyword">if</span>(L-&gt;length == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> TRUE;<span class="hljs-keyword">else</span><span class="hljs-keyword">return</span> FALSE;&#125;Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(SqList *L)</span>&#123;L-&gt;length = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(<span class="hljs-type">const</span> SqList *L, <span class="hljs-type">int</span> i, ElemType *E)</span>&#123;<span class="hljs-keyword">if</span> (L-&gt;length == <span class="hljs-number">0</span> || i &lt; <span class="hljs-number">0</span> || i &gt;= L-&gt;length)<span class="hljs-keyword">return</span> ERROR;*E = L-&gt;data[i];<span class="hljs-keyword">return</span> OK;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">compar</span><span class="hljs-params">(<span class="hljs-type">const</span> ElemType *Ea, <span class="hljs-type">const</span> ElemType *Eb)</span>&#123;    （注意替换）&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(<span class="hljs-type">const</span> SqList *L, <span class="hljs-type">const</span> ElemType *E, <span class="hljs-type">int</span> (*compar)(<span class="hljs-type">const</span> ElemType *, <span class="hljs-type">const</span> ElemType *))</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L-&gt;length; i++)&#123;<span class="hljs-keyword">if</span> (compar(&amp;L-&gt;data[i], E) == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> i;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, <span class="hljs-type">const</span> ElemType *E)</span>&#123;<span class="hljs-keyword">if</span> (i &gt; L-&gt;length || i &lt; <span class="hljs-number">0</span> || L-&gt;length &gt;= MAXSIZE)<span class="hljs-keyword">return</span> ERROR;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = L-&gt;length; j &gt; i; j--)L-&gt;data[j] = L-&gt;data[j - <span class="hljs-number">1</span>];L-&gt;data[i] = *E;L-&gt;length++;<span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, ElemType *E)</span>&#123;<span class="hljs-keyword">if</span> (i &gt;= L-&gt;length || i &lt; <span class="hljs-number">0</span> || L-&gt;length &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ERROR;*E = L-&gt;data[i];L-&gt;length--;<span class="hljs-keyword">for</span> (; i &lt; L-&gt;length; i++)&#123;L-&gt;data[i] = L-&gt;data[i + <span class="hljs-number">1</span>];&#125;<span class="hljs-keyword">return</span> OK;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">ListLength</span><span class="hljs-params">(<span class="hljs-type">const</span> SqList *L)</span>&#123;<span class="hljs-keyword">return</span> L-&gt;length;&#125;Status <span class="hljs-title function_">ListTraverse</span><span class="hljs-params">(SqList *L, Status (*func_visit)(ElemType *E))</span>&#123;<span class="hljs-keyword">if</span> (L-&gt;length &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ERROR;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L-&gt;length; i++)<span class="hljs-keyword">if</span> (!func_visit(&amp;L-&gt;data[i]))<span class="hljs-keyword">return</span> ERROR;<span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">unionL</span><span class="hljs-params">(SqList *desk, <span class="hljs-type">const</span> SqList *src)</span>&#123;ElemType e;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; src-&gt;length; i++)&#123;GetElem(src, i, &amp;e);<span class="hljs-keyword">if</span>(!LocateElem(desk, &amp;e, compar))<span class="hljs-keyword">if</span>(!ListInsert(desk, desk-&gt;length, &amp;e))<span class="hljs-keyword">return</span> ERROR;<span class="hljs-keyword">return</span> OK;&#125;&#125;</code></pre></div><h1>链式存储</h1><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><span class="hljs-class">&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span>&#125; Node;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-type">int</span> length;    Node *first;    Node *last;&#125; LinkList;</code></pre></div><div class="code-wrapper"><pre><code class="hljs C">Status <span class="hljs-title function_">InitList</span><span class="hljs-params">(LinkList *L)</span>&#123;    L-&gt;length = <span class="hljs-number">0</span>;    L-&gt;first = <span class="hljs-literal">NULL</span>;    L-&gt;last = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(<span class="hljs-type">const</span> LinkList *L)</span>&#123;    <span class="hljs-keyword">if</span> (!L-&gt;length)        <span class="hljs-keyword">return</span> FALSE;    <span class="hljs-keyword">return</span> TRUE;&#125;Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(LinkList *L)</span>&#123;    InitList(L);    <span class="hljs-keyword">return</span> OK;&#125;Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(<span class="hljs-type">const</span> LinkList *L, <span class="hljs-type">int</span> i, ElemType *E)</span>&#123;    <span class="hljs-keyword">if</span> (L-&gt;length == <span class="hljs-number">0</span> || i &lt; <span class="hljs-number">0</span> || i &gt;= L-&gt;length)        <span class="hljs-keyword">return</span> ERROR;    Node *now = L-&gt;first;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)    &#123;        now = now-&gt;next;    &#125;    *E = now-&gt;data;    <span class="hljs-keyword">return</span> OK;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(<span class="hljs-type">const</span> LinkList *L, <span class="hljs-type">const</span> ElemType *E)</span>&#123;    Node *now = L-&gt;first;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L-&gt;length; i++)    &#123;        <span class="hljs-keyword">if</span> (now-&gt;data = *E)            <span class="hljs-keyword">return</span> i;        now = now-&gt;next;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> i, <span class="hljs-type">const</span> ElemType *E)</span>&#123;    <span class="hljs-keyword">if</span> (i &gt; L-&gt;length || i &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ERROR;    Node *tmp = L-&gt;first;    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)    &#123;        L-&gt;first = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));        L-&gt;first-&gt;data = *E;        L-&gt;first-&gt;next = tmp;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == L-&gt;length)    &#123;        L-&gt;last-&gt;next = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));        L-&gt;last = L-&gt;last-&gt;next;        L-&gt;last-&gt;data = *E;        L-&gt;last-&gt;next = <span class="hljs-literal">NULL</span>;    &#125;    <span class="hljs-keyword">else</span>    &#123;        Node *now = tmp;        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++)        &#123;            now = now-&gt;next;        &#125;        tmp = now-&gt;next;        now-&gt;next = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));        now-&gt;next-&gt;data = *E;        now-&gt;next-&gt;next = tmp;    &#125;    L-&gt;length++;    <span class="hljs-keyword">return</span> OK;&#125;</code></pre></div><h1>To Be Updated …</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Boilplate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo和GitHub Pages的个人博客部署</title>
    <link href="/clu15c2u40001f8q11uzi2d8a_%E5%9F%BA%E4%BA%8Ehexo%E5%92%8Cgithub-pages%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <url>/clu15c2u40001f8q11uzi2d8a_%E5%9F%BA%E4%BA%8Ehexo%E5%92%8Cgithub-pages%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1>拥有GitHub账号</h1><p><a href="https://github.com">GitHub: Let’s build from here</a></p><h1>搭建环境</h1><h2 id="创建GitHub仓库">创建GitHub仓库</h2><p>创建仓库名为<code>username（注意替换）.github.io</code>的GitHub仓库，不附带README.md文件。</p><h2 id="安装git">安装git</h2><p><a href="https://git-scm.com/">git</a></p><h2 id="安装Node-js">安装Node.js</h2><p><a href="https://nodejs.org/en">Node.js</a></p><h2 id="安装Hexo">安装Hexo</h2><p>在本地选择一个路径，新建博客文件夹<code>blog/</code>，在博客文件夹内右键空白处，选择<code>Open Git Bash here</code>，输入：</p><div class="code-wrapper"><pre><code class="hljs bash">$ npm install -g hexo-cli$ hexo init</code></pre></div><h1>远程连接</h1><div class="code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -al ~/.ssh$ ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;useremail@example.com（注意替换）&quot;</span>（三次回车）$ <span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub</code></pre></div><p>将打印出的公钥右键Copy。</p><p>GitHub -&gt; 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH Key</p><p>在Title栏取名，在Key栏粘贴刚才复制的公钥，Add SSH Key。</p><h2 id="验证连接">验证连接</h2><div class="code-wrapper"><pre><code class="hljs bash">$ ssh -T git@github.com</code></pre></div><p>如果匹配指纹<code>SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU</code>，则输入：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">yes</span></code></pre></div><h1>第一次推送</h1><h2 id="修改git配置">修改git配置</h2><p>登录git，修改配置以使用main作为默认分支名称：</p><div class="code-wrapper"><pre><code class="hljs bash">$ git config --global user.email <span class="hljs-string">&quot;useremail@example.com（注意替换）&quot;</span>$ git config --global user.name <span class="hljs-string">&quot;username（注意替换）&quot;</span>$ git config --global init.defaultBranch main</code></pre></div><h2 id="新建git仓库并建立连接">新建git仓库并建立连接</h2><div class="code-wrapper"><pre><code class="hljs bash">$ git init$ git remote add origin git@github.com:username/username.github.io.git（注意替换）</code></pre></div><h2 id="推送">推送</h2><div class="code-wrapper"><pre><code class="hljs bash">$ git add --all$ git commit -m <span class="hljs-string">&quot;Add source files&quot;</span>$ git push -u origin main</code></pre></div><h1>第二次推送</h1><p>开辟新分支 gh-pages 用于展示由 main 生成的网页，将“由 main 生成网页推送到 gh-pages”这一过程交给 GitHub Actions 自动完成，为此新建文件 <code>blog/.github/workflows/pages.yml</code>，内容如下：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">push:</span>    <span class="hljs-attr">branches:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment"># default branch</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">pages:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">permissions:</span>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">20.</span><span class="hljs-string">x.x（注意替换）</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;20（注意替换）&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span></code></pre></div><p>其中Node.js的版本号可以通过以下途径得知：</p><ol><li>安装Node.js时下载的安装包名称中包含版本号；</li><li><code>win</code>+<code>R</code> -&gt; <code>cmd</code> -&gt; <code>确定</code> -&gt; <code>node -v</code>;</li><li><code>$ mode -v</code>。</li></ol><h2 id="反解耦合设计">反解耦合设计</h2><p>在blog/的<code>.gitignore</code>文件中删去<code>node_modules/</code>，以解决本地资源文件与远程仓库不同步的问题。</p><div class="note note-warning">            <p>原设计的目的是解耦，以实现模块化和规范化，<strong>但我不会！！！</strong><br>有能力者另请参阅<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo 博客搭建指北 | KGL.BLOG)](https://kongolou.github.io/post/Hexo-博客搭建指北.html)">[3]</span></a></sup>中<code>缺失之环-β</code>章节。</p>          </div><h2 id="推送-2">推送</h2><div class="code-wrapper"><pre><code class="hljs bash">$ git add --all$ git commit -m <span class="hljs-string">&quot;Add workflows-pages.yml&quot;</span>$ git push -u origin main</code></pre></div><h1>切换展示分支</h1><p>GitHub -&gt; 博客仓库 -&gt; Settings -&gt; Pages</p><p>Source: <code>Deploy from a branch</code></p><p>Branch: <code>gh-pages</code> <code>/(root)</code></p><p>点击<code>Save</code>。</p><h1>结束语</h1><p>在完成上述步骤后，访问<code>https://username.github.io</code>即可查看完成部署的博客页面。</p><hr><h1>参考链接</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">概述 | Hexo</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/github-pages">在 GitHub Pages 上部署 Hexo | Hexo</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://kongolou.github.io/post/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97.html">Hexo 博客搭建指北 | KGL.BLOG)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.zhihu.com/question/39326923/answer/3120401540">利用hexo在GItHub上建立个人博客？ - 知乎</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GItHub</tag>
      
      <tag>Git</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
